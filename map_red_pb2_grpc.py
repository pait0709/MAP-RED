# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import map_red_pb2 as map__red__pb2


class KmeansStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MastertoMapper = channel.unary_unary(
                '/Kmeans/MastertoMapper',
                request_serializer=map__red__pb2.MastertoMapperRequest.SerializeToString,
                response_deserializer=map__red__pb2.MastertoMapperResponse.FromString,
                )
        self.MastertoReducer = channel.unary_unary(
                '/Kmeans/MastertoReducer',
                request_serializer=map__red__pb2.MastertoReducerRequest.SerializeToString,
                response_deserializer=map__red__pb2.MastertoReducerResponse.FromString,
                )
        self.ReducertoMapper = channel.unary_unary(
                '/Kmeans/ReducertoMapper',
                request_serializer=map__red__pb2.ReducertoMapperRequest.SerializeToString,
                response_deserializer=map__red__pb2.ReducertoMapperResponse.FromString,
                )


class KmeansServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MastertoMapper(self, request, context):
        """master assigns indexes and gives centroids recieves status, Mapper is server, master is client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MastertoReducer(self, request, context):
        """master gives the go-ahead to reduce and master recieves status and centroids, Reducer is server, master is client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReducertoMapper(self, request, context):
        """reducer requests and also sends its reducer number the partitioned files recieves files and status, Reducer is client, mapper is server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KmeansServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MastertoMapper': grpc.unary_unary_rpc_method_handler(
                    servicer.MastertoMapper,
                    request_deserializer=map__red__pb2.MastertoMapperRequest.FromString,
                    response_serializer=map__red__pb2.MastertoMapperResponse.SerializeToString,
            ),
            'MastertoReducer': grpc.unary_unary_rpc_method_handler(
                    servicer.MastertoReducer,
                    request_deserializer=map__red__pb2.MastertoReducerRequest.FromString,
                    response_serializer=map__red__pb2.MastertoReducerResponse.SerializeToString,
            ),
            'ReducertoMapper': grpc.unary_unary_rpc_method_handler(
                    servicer.ReducertoMapper,
                    request_deserializer=map__red__pb2.ReducertoMapperRequest.FromString,
                    response_serializer=map__red__pb2.ReducertoMapperResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Kmeans', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Kmeans(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MastertoMapper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kmeans/MastertoMapper',
            map__red__pb2.MastertoMapperRequest.SerializeToString,
            map__red__pb2.MastertoMapperResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MastertoReducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kmeans/MastertoReducer',
            map__red__pb2.MastertoReducerRequest.SerializeToString,
            map__red__pb2.MastertoReducerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReducertoMapper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kmeans/ReducertoMapper',
            map__red__pb2.ReducertoMapperRequest.SerializeToString,
            map__red__pb2.ReducertoMapperResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
